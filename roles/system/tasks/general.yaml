---

- name: Block for OS-Specific tasks (Debian)
  when: ansible_os_family == "Debian"
  block:
    - name: Install OS-specific packages
      ansible.builtin.package:
        name:
          - apt-transport-https
          - ca-certificates
          - unattended-upgrades
          - gpg
          - golang
          - htop
        state: present

    - name: Run dist-upgrade
      ansible.builtin.apt:
        upgrade: dist
        update_cache: yes

    - name: Configure unattended-upgrades
      ansible.builtin.copy:
        src: "{{ role_path }}/files/{{ ansible_os_family }}-unattended-upgrades"
        dest: "{{ system.etc }}/apt/apt.conf.d/50unattended-upgrades"
      when: unattended_upgrades

    - name: Symlink pyhton bin to /usr/local/bin
      ansible.builtin.file:
        src: /usr/bin/python3
        dest: /usr/local/bin/python3
        state: link

- name: Block for OS-Specific tasks (FreeBSD)
  when: ansible_os_family == "FreeBSD"
  block:
    - name: Install OS-specific packages (FreeBSD)
      ansible.builtin.package:
        name:
          - go
          - htop
        state: present

    - name: Copy unattended-upgrade to server
      ansible.builtin.copy:
        src: "{{ role_path }}/files/{{ ansible_os_family }}-unattended-upgrades"
        dest: /usr/local/bin/unattended-upgrades
        mode: 0755
        owner: "{{ root.user }}"
        group: "{{ root.group }}"

    - name: Run "dist"-upgrade
      ansible.builtin.shell: /usr/local/bin/unattended-upgrades
      register: upgrade_result
      changed_when: '"Applying patches..." in upgrade_result.stdout_lines'

    - name: Create crontab entry for upgrades
      ansible.builtin.cron:
        name: "Fetch and install updates"
        minute: "0"
        hour: "14"
        job: "/usr/local/bin/unattended-upgrades"
        state: present
      when: unattended_upgrades

    - name: Replace hostname in rc.conf
      ansible.builtin.lineinfile:
        path: /etc/rc.conf
        regexp: '^hostname='
        line: "hostname={{ inventory_hostname }}"
        state: present
      notify: Restart system

- name: Block for OS-Specific tasks (Alpine)
  when: ansible_os_family == "Alpine"
  block:
    - name: Enable community repository
      ansible.builtin.lineinfile:
        path: /etc/apk/repositories
        regexp: '^#(.*\/community)'
        line: '\1'
        backrefs: yes

    - name: Install OS-specific packages
      ansible.builtin.package:
        name:
          - go
          - cronie
        state: present

    - name: Symlink pyhton bin to /usr/local/bin
      ansible.builtin.file:
        src: /usr/bin/python3
        dest: /usr/local/bin/python3
        state: link

    - name: Copy unattended-upgrade to server
      ansible.builtin.copy:
        src: "{{ role_path }}/files/{{ ansible_os_family }}-unattended-upgrades"
        dest: /usr/local/bin/unattended-upgrades
        mode: 0755
        owner: "{{ root.user }}"
        group: "{{ root.group }}"

    - name: Run "dist"-upgrade
      ansible.builtin.shell: /usr/local/bin/unattended-upgrades
      register: upgrade_result
      changed_when: '"Applying patches..." in upgrade_result.stdout_lines'

    - name: Create crontab entry for upgrades
      ansible.builtin.cron:
        name: "Fetch and install updates"
        minute: "0"
        hour: "14"
        job: "/usr/local/bin/unattended-upgrades"
        state: present
      when: unattended_upgrades

- name: Block for OS-Specific tasks (RedHat)
  when: ansible_os_family == "RedHat"
  block:
    - name: Import GPG key for EPEL
      ansible.builtin.rpm_key:
        state: present
        key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9

    - name: Install epel-release
      ansible.builtin.package:
        name: 
          - epel-release
        state: present

    - name: Install OS-specific packages
      ansible.builtin.package:
        name: 
          - dnf-command(copr)
          - golang
          - dnf-automatic
          - https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
          - htop
        state: present

    - name: Symlink pyhton bin to /usr/local/bin
      ansible.builtin.file:
        src: /usr/bin/python3
        dest: /usr/local/bin/python3
        state: link

    - name: Copy unattended-upgrade to server
      ansible.builtin.copy:
        src: "{{ role_path }}/files/{{ ansible_os_family }}-unattended-upgrades"
        dest: "{{ system.etc }}/dnf/automatic.conf"
        mode: 0755
        owner: "{{ root.user }}"
        group: "{{ root.group }}"
      notify: Restart dnf-automatic
      when: unattended_upgrades

- name: Block for OS-Specific tasks (OpenBSD)
  when: ansible_os_family == "OpenBSD"
  block:
    - name: Install OS-specific packages
      ansible.builtin.package:
        name:
          - go
          - curl
          - wget
          - coreutils
          - git
          - sudo-1.9.15.5p0
          - nano
          - bash
          - unzip-6.0p17
          - htop
        state: present

    - name: Copy unattended-upgrade to server
      ansible.builtin.copy:
        src: "{{ role_path }}/files/{{ ansible_os_family }}-unattended-upgrades"
        dest: /usr/local/bin/unattended-upgrades
        mode: 0755
        owner: "{{ root.user }}"
        group: "{{ root.group }}"

    - name: Run "dist"-upgrade
      ansible.builtin.shell: /usr/local/bin/unattended-upgrades
      register: upgrade_result
      changed_when: '"Updating packages..." in upgrade_result.stdout_lines'

    - name: Create crontab entry for upgrades
      ansible.builtin.cron:
        name: "Fetch and install updates"
        minute: "0"
        hour: "14"
        job: "/usr/local/bin/unattended-upgrades"
        state: present

    - name: Replace hostname in /etc/myname
      ansible.builtin.lineinfile:
        path: /etc/myname
        regexp: '^.*$'
        line: "{{ inventory_hostname }}"
        state: present
      notify: Restart system

- name: Block for OS-Specific tasks (Suse)
  when: ansible_os_family == "Suse"
  block:
    - name: Install OS-specific packages
      ansible.builtin.package:
        name: 
          - go
          - htop
          - python312
          - cronie
        state: present

    - name: Symlink pyhton bin to /usr/local/bin
      ansible.builtin.file:
        src: /usr/bin/python3.12
        dest: /usr/local/bin/python3
        state: link

    - name: Copy unattended-upgrade to server
      ansible.builtin.copy:
        src: "{{ role_path }}/files/{{ ansible_os_family }}-unattended-upgrades"
        dest: /usr/local/bin/unattended-upgrades
        mode: 0755
        owner: "{{ root.user }}"
        group: "{{ root.group }}"

    - name: Run "dist"-upgrade
      ansible.builtin.shell: /usr/local/bin/unattended-upgrades
      register: upgrade_result
      changed_when: not '"Nothing to do." in upgrade_result.stdout_lines'

    - name: Create crontab entry for upgrades
      ansible.builtin.cron:
        name: "Fetch and install updates"
        minute: "0"
        hour: "14"
        job: "/usr/local/bin/unattended-upgrades"
        state: present
      when: unattended_upgrades

- name: Block for OS-Specific tasks (Archlinux)
  when: ansible_os_family == "Archlinux"
  block:
    - name: Install OS-specific packages
      ansible.builtin.package:
        name:
          - go
          - htop
          - cronie
        state: present

    - name: Copy unattended-upgrade to server
      ansible.builtin.copy:
        src: "{{ role_path }}/files/{{ ansible_os_family }}-unattended-upgrades"
        dest: /usr/local/bin/unattended-upgrades
        mode: 0755
        owner: "{{ root.user }}"
        group: "{{ root.group }}"

    - name: Run "dist"-upgrade
      ansible.builtin.shell: /usr/local/bin/unattended-upgrades
      register: upgrade_result
      changed_when: not '"there is nothing to do" in upgrade_result.stdout_lines'

    - name: Create crontab entry for upgrades
      ansible.builtin.cron:
        name: "Fetch and install updates"
        minute: "0"
        hour: "14"
        job: "/usr/local/bin/unattended-upgrades"
        state: present
      when: unattended_upgrades

- name: Block for all hosts (except OpenBSD)
  when: ansible_os_family != "OpenBSD"
  block:
    - name: Install required packages
      ansible.builtin.package:
        name:
          - curl
          - wget
          - coreutils
          - git
          - sudo
          - nano
          - bash
          - unzip
        state: present

    - name: Generate /etc/hosts file
      ansible.builtin.template:
        src: "{{ role_path }}/templates/hosts.j2"
        dest: /etc/hosts

    - name: Set the hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Replace hostname in /etc/hostname
      ansible.builtin.lineinfile:
        path: /etc/hostname
        regexp: '^.*$'
        line: "{{ inventory_hostname }}"
        state: present
      notify: Restart system
      when: ansible_os_family != "OpenBSD" and ansible_os_family != "FreeBSD" 