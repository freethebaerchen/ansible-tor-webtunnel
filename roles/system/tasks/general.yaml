---

- name: Block for OS-Specific tasks (Debian)
  when: ansible_os_family == "Debian"
  block:
    - name: Run dist-upgrade
      ansible.builtin.apt:
        upgrade: dist
        update_cache: true

    - name: Configure unattended-upgrades
      ansible.builtin.copy:
        src: "{{ role_path }}/files/{{ ansible_os_family }}-unattended-upgrades"
        dest: "{{ system.etc }}/apt/apt.conf.d/50unattended-upgrades"
        owner: "{{ root.user }}"
        group: "{{ root.group }}"
        mode: "0644"
      when: unattended_upgrades

- name: Block for OS-Specific tasks (FreeBSD)
  when: ansible_os_family == "FreeBSD"
  block:
    - name: Install OS-specific packages (FreeBSD)
      ansible.builtin.package:
        name:
          - git
        state: present

    - name: Setup ports tree
      ansible.builtin.git:
        repo: https://git.FreeBSD.org/ports.git
        version: main
        dest: /usr/ports

    - name: Build go from ports
      community.general.make:
        chdir: /usr/ports/lang/go
        targets:
          - install
          - clean
        params:
          -DBATCH:
      register: ports_go
      failed_when:
        - "'is already installed' not in ports_go.stdout"
        - "'Installing go' not in ports_go.stdout"

- name: Block for OS-Specific tasks (Alpine)
  when: ansible_os_family == "Alpine"
  block:
    - name: Enable community repository
      ansible.builtin.lineinfile:
        path: /etc/apk/repositories
        regexp: '^#(.*\/community)'
        line: '\1'
        backrefs: true

- name: Block for OS-Specific tasks (RedHat)
  when: ansible_os_family == "RedHat"
  block:
    - name: Import GPG key for EPEL
      ansible.builtin.rpm_key:
        state: present
        key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9

    - name: Install epel-release
      ansible.builtin.package:
        name:
          - epel-release
        state: present

    - name: Copy unattended-upgrade to server
      ansible.builtin.copy:
        src: "{{ role_path }}/files/{{ ansible_os_family }}-unattended-upgrades"
        dest: "{{ system.etc }}/dnf/automatic.conf"
        mode: 0755
        owner: "{{ root.user }}"
        group: "{{ root.group }}"
      notify: Restart dnf-automatic
      when: unattended_upgrades

    - name: Run system upgrade on RHEL-based systems
      ansible.builtin.dnf:
        name: "*"
        state: latest
        update_cache: true
        # noqa package-latest
        # "state: latest" needed to avoid dependency errors

- name: Block for OS-Specific tasks (Archlinux)
  when: ansible_os_family == "Archlinux"
  block:
    - name: Update package cache
      ansible.builtin.command:
        cmd: pacman -Sy --noconfirm
      changed_when: false # No changes will be applied. Set just for ansible-lint.

- name: Install OS-specfic packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ system.packages }}"

- name: Copy unattended-upgrade to server
  ansible.builtin.copy:
    src: "{{ role_path }}/files/{{ ansible_os_family }}-unattended-upgrades"
    dest: /usr/local/bin/unattended-upgrades
    mode: 0755
    owner: "{{ root.user }}"
    group: "{{ root.group }}"
  when:
    - ansible_os_family != "Debian"
    - ansible_os_family != "RedHat"

- name: Run "dist"-upgrade
  ansible.builtin.command: /usr/local/bin/unattended-upgrades
  changed_when: true
  when:
    - ansible_os_family != "Debian"
    - ansible_os_family != "RedHat"

- name: Create crontab entry for upgrades
  ansible.builtin.cron:
    name: "Fetch and install updates"
    minute: "0"
    hour: "14"
    job: "/usr/local/bin/unattended-upgrades"
    state: present
  when:
    - unattended_upgrades
    - ansible_os_family != "Debian"
    - ansible_os_family != "RedHat"

- name: Disable and stop firewalld
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: false
  when: ansible_os_family == "RedHat" or ansible_os_family == "Suse"

- name: Disable SELinux
  ansible.posix.selinux:
    state: disabled
  when: ansible_os_family == "RedHat" or ansible_os_family == "Suse"

- name: Install required packages
  ansible.builtin.package:
    name:
      - curl
      - wget
      - coreutils
      - git
      - sudo
      - nano
      - bash
      - unzip
    state: present

- name: Generate /etc/hosts file
  ansible.builtin.template:
    src: "{{ role_path }}/templates/hosts.j2"
    dest: /etc/hosts
    owner: "{{ root.user }}"
    group: "{{ root.group }}"
    mode: "0644"

- name: Set the hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
  when: ansible_os_family != "OpenBSD"
  notify: Restart system

- name: Replace hostname in /etc/myname
  ansible.builtin.lineinfile:
    path: /etc/myname
    regexp: '^.*$'
    line: "{{ inventory_hostname }}"
    state: present
  when: ansible_os_family == "OpenBSD"
  notify: Restart system

- name: Replace hostname in rc.conf
  ansible.builtin.lineinfile:
    path: /etc/rc.conf
    regexp: '^hostname='
    line: "hostname={{ inventory_hostname }}"
    state: present
  notify: Restart system
  when: ansible_os_family == "FreeBSD"

- name: Symlink pyhton bin to /usr/local/bin
  ansible.builtin.file:
    src: /usr/bin/python3
    dest: /usr/local/bin/python3
    state: link
  when: ansible_os_family != "FreeBSD"
