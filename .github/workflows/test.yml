---

name: Test Ansible Playbook

on:
  push:
    branches-ignore:
      - main
    paths-ignore:
      - '.github/workflows/venv.yml'
      - '.github/workflows/hostvars.yml'
      - 'requirements.txt'
      - 'requirements.yaml'
      - 'todo.md'
      - 'readme.md'
      - '.env'
      - '.yamllint'
      - '.ansible-lint'
      - '.pre-commit-config.yaml'
      - '.gitignore'

env:
  ANSIBLE_USER_PASSWORD: ${{ secrets.ANSIBLE_USER_PASSWORD }}
  PY_COLORS: 1
  ANSIBLE_FORCE_COLOR: 1

jobs:
  select-webserver:
    runs-on: self-hosted
    outputs:
      webserver: ${{ steps.select-webserver.outputs.webserver }}
    steps:
      - name: Determine webserver randomly
        id: select-webserver
        run: |
          WEBSERVERS=("caddy" "nginx" "apache")
          RANDOM_INDEX=$((RANDOM % 3))
          WEBSERVER_SOFTWARE=${WEBSERVERS[$RANDOM_INDEX]}
          echo "webserver=$WEBSERVER_SOFTWARE" >> "$GITHUB_OUTPUT"
          echo "Using webserver: $WEBSERVER_SOFTWARE"

  create-ubuntu:
    needs:
      - select-webserver
    runs-on: self-hosted
    env:
      OS: ubuntu
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Delete ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }}
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Create ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }} server
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Start all ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=start-server -i actions-inventory.ini -e 'os=${{ env.OS }}'

  create-alpine:
    needs:
      - select-webserver
    runs-on: self-hosted
    env:
      OS: alpine
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Delete ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }}
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Create ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }} server
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Start all ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=start-server -i actions-inventory.ini -e 'os=${{ env.OS }}'

  create-archlinux:
    needs:
      - select-webserver
    runs-on: self-hosted
    env:
      OS: archlinux
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Delete ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }}
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Create ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }} server
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Start all ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=start-server -i actions-inventory.ini -e 'os=${{ env.OS }}'

  create-freebsd:
    needs:
      - select-webserver
    runs-on: self-hosted
    env:
      OS: freebsd
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Delete ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }}
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Create ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }} server
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Start all ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=start-server -i actions-inventory.ini -e 'os=${{ env.OS }}'

  create-openbsd:
    needs:
      - select-webserver
    runs-on: self-hosted
    env:
      OS: openbsd
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Delete ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }}
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Create ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }} server
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Start all ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=start-server -i actions-inventory.ini -e 'os=${{ env.OS }}'

  create-rhel:
    needs:
      - select-webserver
    runs-on: self-hosted
    env:
      OS: rhel
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Delete ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }}
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Create ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }} server
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Start all ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=start-server -i actions-inventory.ini -e 'os=${{ env.OS }}'

  create-suse:
    needs:
      - select-webserver
    runs-on: self-hosted
    env:
      OS: suse
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Delete ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }}
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Create ${{ env.OS }}-${{ env.WEBSERVER_SOFTWARE }} server
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-server -i actions-inventory.ini -e 'os=${{ env.OS }} webserver_software=["${{ env.WEBSERVER_SOFTWARE }}"]'

      - name: Start all ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=start-server -i actions-inventory.ini -e 'os=${{ env.OS }}'

  setup-ubuntu:
    needs:
      - create-ubuntu
    runs-on: self-hosted
    env:
      OS: ubuntu
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Download host_vars
        run: |
          rsync -avz --no-o --no-g 10.1.0.100:test_host_vars/ host_vars/ >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Wait until the ${{ env.OS }} servers are reachable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Run Ansible Playbook Test for ${{ env.OS }}
        run: |
          source venv/bin/activate
          ansible-playbook playbook.yaml --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Upload connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete connection-strings-${{ env.OS }}.txt 10.1.0.100: >/dev/null && \
          echo "Uploaded connection-strings-${{ env.OS }}.txt successfully."

  setup-alpine:
    needs:
      - create-alpine
    runs-on: self-hosted
    env:
      OS: alpine
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Download host_vars
        run: |
          rsync -avz --no-o --no-g 10.1.0.100:test_host_vars/ host_vars/ >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Wait until the ${{ env.OS }} servers are reachable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Run Ansible Playbook Test for ${{ env.OS }}
        run: |
          source venv/bin/activate
          ansible-playbook playbook.yaml --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Upload connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete connection-strings-${{ env.OS }}.txt 10.1.0.100: >/dev/null && \
          echo "Uploaded connection-strings-${{ env.OS }}.txt successfully."

  setup-archlinux:
    needs:
      - create-archlinux
    runs-on: self-hosted
    env:
      OS: archlinux
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Download host_vars
        run: |
          rsync -avz --no-o --no-g 10.1.0.100:test_host_vars/ host_vars/ >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Wait until the ${{ env.OS }} servers are reachable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Run Ansible Playbook Test for ${{ env.OS }}
        run: |
          source venv/bin/activate
          ansible-playbook playbook.yaml --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Upload connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete connection-strings-${{ env.OS }}.txt 10.1.0.100: >/dev/null && \
          echo "Uploaded connection-strings-${{ env.OS }}.txt successfully."

  setup-freebsd:
    needs:
      - create-freebsd
    runs-on: self-hosted
    env:
      OS: freebsd
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Download host_vars
        run: |
          rsync -avz --no-o --no-g 10.1.0.100:test_host_vars/ host_vars/ >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Wait until the ${{ env.OS }} servers are reachable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Run Ansible Playbook Test for ${{ env.OS }}
        run: |
          source venv/bin/activate
          ansible-playbook playbook.yaml --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Upload connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete connection-strings-${{ env.OS }}.txt 10.1.0.100: >/dev/null && \
          echo "Uploaded connection-strings-${{ env.OS }}.txt successfully."

  setup-openbsd:
    needs:
      - create-openbsd
    runs-on: self-hosted
    env:
      OS: openbsd
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Download host_vars
        run: |
          rsync -avz --no-o --no-g 10.1.0.100:test_host_vars/ host_vars/ >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Wait until the ${{ env.OS }} servers are reachable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Run Ansible Playbook Test for ${{ env.OS }}
        run: |
          source venv/bin/activate
          ansible-playbook playbook.yaml --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Upload connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete connection-strings-${{ env.OS }}.txt 10.1.0.100: >/dev/null && \
          echo "Uploaded connection-strings-${{ env.OS }}.txt successfully."

  setup-rhel:
    needs:
      - create-rhel
    runs-on: self-hosted
    env:
      OS: rhel
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Download host_vars
        run: |
          rsync -avz --no-o --no-g 10.1.0.100:test_host_vars/ host_vars/ >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Wait until the ${{ env.OS }} servers are reachable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Run Ansible Playbook Test for ${{ env.OS }}
        run: |
          source venv/bin/activate
          ansible-playbook playbook.yaml --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Upload connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete connection-strings-${{ env.OS }}.txt 10.1.0.100: >/dev/null && \
          echo "Uploaded connection-strings-${{ env.OS }}.txt successfully."

  setup-suse:
    needs:
      - create-suse
    runs-on: self-hosted
    env:
      OS: suse
      WEBSERVER_SOFTWARE: ${{ needs.select-webserver.outputs.webserver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Download host_vars
        run: |
          rsync -avz --no-o --no-g 10.1.0.100:test_host_vars/ host_vars/ >/dev/null && \
          echo "Downloaded venv successfully."


      - name: Wait until the ${{ env.OS }} servers are reachable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Run Ansible Playbook Test for ${{ env.OS }}
        run: |
          source venv/bin/activate
          ansible-playbook playbook.yaml --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Upload connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete connection-strings-${{ env.OS }}.txt 10.1.0.100: >/dev/null && \
          echo "Uploaded connection-strings-${{ env.OS }}.txt successfully."

  test-ubuntu:
    needs:
      - setup-ubuntu
    runs-on: self-hosted
    env:
      OS: ubuntu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Create ${{ env.OS }} webtunnel-client
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"

      - name: Download connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:connection-strings-${{ env.OS }}.txt ./connection-strings.txt >/dev/null && \
          echo "Downloaded connection-strings-${{ env.OS }}.txt successfully."

      - name: Wait until the ${{ env.OS }} webtunnel client is reacheable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test connections
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=test-webtunnel --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test SSH connection
        run: |
          source venv/bin/activate
          python3 scripts/test_ssh.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Test HTTP/HTTPS connection
        run: |
          source venv/bin/activate
          python3 scripts/test_web.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Shutdown ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=shutdown-server -i actions-inventory.ini  -e "os=${{ env.OS }}"

      - name: Delete ${{ env.OS }} webtunnel-client
        if: always()
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"

  test-alpine:
    needs:
      - setup-alpine
    runs-on: self-hosted
    env:
      OS: alpine
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Create ${{ env.OS }} webtunnel-client
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"

      - name: Download connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:connection-strings-${{ env.OS }}.txt ./connection-strings.txt >/dev/null && \
          echo "Downloaded connection-strings-${{ env.OS }}.txt successfully."

      - name: Wait until the ${{ env.OS }} webtunnel client is reacheable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test connections
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=test-webtunnel --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test SSH connection
        run: |
          source venv/bin/activate
          python3 scripts/test_ssh.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Test HTTP/HTTPS connection
        run: |
          source venv/bin/activate
          python3 scripts/test_web.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Shutdown ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=shutdown-server -i actions-inventory.ini  -e "os=${{ env.OS }}"

      - name: Delete ${{ env.OS }} webtunnel-client
        if: always()
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"

  test-archlinux:
    needs:
      - setup-archlinux
    runs-on: self-hosted
    env:
      OS: archlinux
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Create ${{ env.OS }} webtunnel-client
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"

      - name: Download connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:connection-strings-${{ env.OS }}.txt ./connection-strings.txt >/dev/null && \
          echo "Downloaded connection-strings-${{ env.OS }}.txt successfully."

      - name: Wait until the ${{ env.OS }} webtunnel client is reacheable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test connections
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=test-webtunnel --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test SSH connection
        run: |
          source venv/bin/activate
          python3 scripts/test_ssh.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Test HTTP/HTTPS connection
        run: |
          source venv/bin/activate
          python3 scripts/test_web.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Shutdown ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=shutdown-server -i actions-inventory.ini  -e "os=${{ env.OS }}"

      - name: Delete ${{ env.OS }} webtunnel-client
        if: always()
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"

  test-freebsd:
    needs:
      - setup-freebsd
    runs-on: self-hosted
    env:
      OS: freebsd
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Create ${{ env.OS }} webtunnel-client
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"

      - name: Download connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:connection-strings-${{ env.OS }}.txt ./connection-strings.txt >/dev/null && \
          echo "Downloaded connection-strings-${{ env.OS }}.txt successfully."

      - name: Wait until the ${{ env.OS }} webtunnel client is reacheable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test connections
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=test-webtunnel --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test SSH connection
        run: |
          source venv/bin/activate
          python3 scripts/test_ssh.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Test HTTP/HTTPS connection
        run: |
          source venv/bin/activate
          python3 scripts/test_web.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Shutdown ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=shutdown-server -i actions-inventory.ini  -e "os=${{ env.OS }}"

      - name: Delete ${{ env.OS }} webtunnel-client
        if: always()
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"

  test-openbsd:
    needs:
      - setup-openbsd
    runs-on: self-hosted
    env:
      OS: openbsd
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Create ${{ env.OS }} webtunnel-client
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"

      - name: Download connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:connection-strings-${{ env.OS }}.txt ./connection-strings.txt >/dev/null && \
          echo "Downloaded connection-strings-${{ env.OS }}.txt successfully."

      - name: Wait until the ${{ env.OS }} webtunnel client is reacheable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test connections
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=test-webtunnel --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test SSH connection
        run: |
          source venv/bin/activate
          python3 scripts/test_ssh.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Test HTTP/HTTPS connection
        run: |
          source venv/bin/activate
          python3 scripts/test_web.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Shutdown ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=shutdown-server -i actions-inventory.ini  -e "os=${{ env.OS }}"

      - name: Delete ${{ env.OS }} webtunnel-client
        if: always()
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"

  test-rhel:
    needs:
      - setup-rhel
    runs-on: self-hosted
    env:
      OS: rhel
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Create ${{ env.OS }} webtunnel-client
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"

      - name: Download connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:connection-strings-${{ env.OS }}.txt ./connection-strings.txt >/dev/null && \
          echo "Downloaded connection-strings-${{ env.OS }}.txt successfully."

      - name: Wait until the ${{ env.OS }} webtunnel client is reacheable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test connections
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=test-webtunnel --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test SSH connection
        run: |
          source venv/bin/activate
          python3 scripts/test_ssh.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Test HTTP/HTTPS connection
        run: |
          source venv/bin/activate
          python3 scripts/test_web.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Shutdown ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=shutdown-server -i actions-inventory.ini  -e "os=${{ env.OS }}"

      - name: Delete ${{ env.OS }} webtunnel-client
        if: always()
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"

  test-suse:
    needs:
      - setup-suse
    runs-on: self-hosted
    env:
      OS: suse
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download venv
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:venv . >/dev/null && \
          echo "Downloaded venv successfully."

      - name: Create ${{ env.OS }} webtunnel-client
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=create-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"

      - name: Download connection-strings for ${{ env.OS }}
        shell: bash
        run: |
          rsync -avz --no-o --no-g --delete 10.1.0.100:connection-strings-${{ env.OS }}.txt ./connection-strings.txt >/dev/null && \
          echo "Downloaded connection-strings-${{ env.OS }}.txt successfully."

      - name: Wait until the ${{ env.OS }} webtunnel client is reacheable
        run: |
          source venv/bin/activate
          python3 scripts/check_hosts.py --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test connections
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=test-webtunnel --limit ${{ env.OS }}-webtunnel-client -i actions-inventory.ini

      - name: Test SSH connection
        run: |
          source venv/bin/activate
          python3 scripts/test_ssh.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Test HTTP/HTTPS connection
        run: |
          source venv/bin/activate
          python3 scripts/test_web.py --limit ${{ env.OS }} -i actions-inventory.ini

      - name: Shutdown ${{ env.OS }} servers
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=shutdown-server -i actions-inventory.ini  -e "os=${{ env.OS }}"

      - name: Delete ${{ env.OS }} webtunnel-client
        if: always()
        run: |
          source venv/bin/activate
          ansible-playbook actions-playbook.yaml --tags=delete-webtunnel-client -i actions-inventory.ini -e "os=${{ env.OS }}"
