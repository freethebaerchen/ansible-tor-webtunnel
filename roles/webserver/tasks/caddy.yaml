---

- name: Block for setting up caddy (OS-Family Debian)
  when: ansible_os_family == "Debian"
  block:
    - name: Add the Caddy repository key
      ansible.builtin.apt_key:
        url: https://dl.cloudsmith.io/public/caddy/stable/gpg.key
        state: present

    - name: Add the Caddy APT repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64,arm64] https://dl.cloudsmith.io/public/caddy/stable/deb/ubuntu focal main"
        state: present
        filename: caddy-stable

- name: Block for OS-spcific tasks (FreeBSD)
  when: ansible_os_family == "FreeBSD"
  block:
    - name: Set caddy-users
      community.general.sysrc:
        name: caddy_user
        value: "{{ webserver.user }}"
        state: value_present

    - name: Set caddy-group
      community.general.sysrc:
        name: caddy_group
        value: "{{ webserver.group }}"
        state: value_present

    - name: Install OS-specific software
      ansible.builtin.package:
        name:
          - portacl-rc
        state: present

    - name: Set portacl-user
      community.general.sysrc:
        name: portacl_users
        value: "{{ webserver.group }}"
        state: value_present

    - name: Set portacl-user privilege (tcp)
      community.general.sysrc:
        name: portacl_user_www_tcp
        value: http https
        state: value_present
      notify: Restart portacl

    - name: Set portacl-user privilege (udp)
      community.general.sysrc:
        name: portacl_user_www_udp
        value: https
        state: value_present
      notify: Restart portacl

#    - name: Build caddy from ports
#      community.general.make:
#        chdir: /usr/ports/www/caddy
#        targets:
#          - install
#          - clean
#        params:
#          -DBATCH:
#      register: ports_caddy
#      failed_when:
#        - "'is already installed' not in ports_caddy.stdout"
#        - "'Installing caddy' not in ports_caddy.stdout"

- name: Block for OS-spcific tasks (RedHat)
  when: ansible_os_family == "RedHat"
  block:
    - name: Enable the Caddy COPR repository
      ansible.builtin.command: dnf copr enable @caddy/caddy -y
      changed_when: true # Idempotently changes every time. Set just for ansible-lint.

- name: Install caddy
  ansible.builtin.package:
    name:
      - caddy

- name: Include webroot
  ansible.builtin.include_tasks: webroot.yaml

- name: Include log
  ansible.builtin.include_tasks: log.yaml

- name: Create caddy subdirectory
  ansible.builtin.file:
    path: "{{ webserver_config[use_webserver].extra_dirs }}"
    state: directory
    owner: "{{ root.user }}"
    group: "{{ root.group }}"
    mode: "0755"

- name: Check if Caddyfile differs from template
  ansible.builtin.template:
    src: "{{ role_path }}/templates/Caddyfile.j2"
    dest: "/tmp/Caddyfile"
    mode: "0644"

- name: Get checksum of rendered Caddyfile
  ansible.builtin.stat:
    path: "/tmp/Caddyfile"
    checksum_algorithm: sha256
  register: rendered_caddyfile

- name: Get checksum of original Caddyfile
  ansible.builtin.stat:
    path: "{{ webserver_config[use_webserver].config_dir }}/Caddyfile"
    checksum_algorithm: sha256
  register: orig_caddyfile

- name: Backup existing Caddyfile if different from template
  ansible.builtin.copy:
    src: "{{ webserver_config[use_webserver].config_dir }}/Caddyfile"
    dest: "{{ webserver_config[use_webserver].config_dir }}/original-Caddyfile"
    owner: "{{ root.user }}"
    group: "{{ root.group }}"
    mode: "0644"
    remote_src: true
  when: rendered_caddyfile.stat.checksum != orig_caddyfile.stat.checksum
  notify: Print caddy info

- name: Render new Caddyfile
  ansible.builtin.template:
    src: "{{ role_path }}/templates/Caddyfile.j2"
    dest: "{{ webserver_config[use_webserver].config_dir }}/Caddyfile"
    mode: "0644"
  notify:
    - Validate caddy

- name: Include certificate request
  ansible.builtin.include_tasks: certificate.yaml

- name: Read random-string.txt
  ansible.builtin.slurp:
    src: "{{ tor.directory }}/random-string.txt"
  register: random_string_file

- name: Decode file content
  ansible.builtin.set_fact:
    random_string: "{{ random_string_file.content | b64decode }}"

- name: Enable caddy service
  ansible.builtin.service:
    name: "{{ webserver_config[use_webserver].service_name }}"
    enabled: true
  when: ansible_os_family == "OpenBSD"

- name: Set root for caddy
  ansible.builtin.command:
    cmd: rcctl set caddy user root
  register: caddy_rcctl
  changed_when: true # Idempotently changes every time. Set just for ansible-lint.
  when: ansible_os_family == "OpenBSD"

- name: Render webtunnel-Caddyfile
  ansible.builtin.template:
    src: "{{ role_path }}/templates/webtunnel-Caddyfile.j2"
    dest: "{{ webserver_config[use_webserver].extra_dirs }}/webtunnel-Caddyfile"
    owner: "{{ root.user }}"
    group: "{{ root.group }}"
    mode: "0644"
  notify:
    - Validate caddy
  vars:
    webtunnel_path: "{{ random_string }}"
