# ip6tables rules for Tor webtunnel DDoS protection
# Generated by Ansible on {{ ansible_date_time.date }}
# Based on https://github.com/toralf/torutils

# Clear existing rules
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

# Allow loopback
-A INPUT -i lo -m comment --comment "DDoS IPv6 {{ ansible_date_time.date }}" -j ACCEPT

# IPv6 Multicast
-A INPUT -p udp --source fe80::/10 --dst ff02::/80 -j ACCEPT

# Strict TCP state checking
-A INPUT -p tcp ! --syn -m state --state NEW -j DROP
-A INPUT -m conntrack --ctstate INVALID -j DROP

# Allow established connections
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# Allow SSH
-A INPUT -p tcp --dport {{ ansible_port | default(22) }} --syn -j ACCEPT

# Rate limit ICMP
-A INPUT -p ipv6-icmp --icmpv6-type echo-request -m limit --limit 6/s -j ACCEPT
-A INPUT -p ipv6-icmp -j ACCEPT

# Allow DHCPv6
-A INPUT -p udp --dport 546 -j ACCEPT

# Tor webtunnel rules
# Rules for Tor webtunnel at {{ ansible_default_ipv6.address }}:15000
-A INPUT -p tcp --dst {{ ansible_default_ipv6.address }} --syn -m set --match-set tor-trust6 src -j ACCEPT
-A INPUT -p tcp --dst {{ ansible_default_ipv6.address }} --dport 15000 -m hashlimit --hashlimit-mode srcip,dstport --hashlimit-srcmask 80 --hashlimit-name tor-ddos-15000 --hashlimit-above 9/minute --hashlimit-burst 1 --hashlimit-htable-expire 120000 -j SET --add-set tor-ddos6-15000 src --exist
-A INPUT -p tcp --dst {{ ansible_default_ipv6.address }} --dport 15000 -m set --match-set tor-ddos6-15000 src -j DROP
-A INPUT -p tcp --dst {{ ansible_default_ipv6.address }} --dport 15000 -m connlimit --connlimit-mask 80 --connlimit-above 9 -j DROP
-A INPUT -p tcp --dst {{ ansible_default_ipv6.address }} --dport 15000 --syn -j ACCEPT

# Hetzner monitoring
-A INPUT -m set --match-set hetzner-sysmon6 src -j ACCEPT

# Custom services
{% for service in local_services | default([]) %}
-A INPUT -p tcp --dst {{ service.ip | default(ansible_default_ipv6.address) }} --dport {{ service.port }} --syn -j ACCEPT
{% endfor %}

{% for service in remote_services | default([]) %}
-A INPUT -p tcp --src {{ service.ip }} --dport {{ service.port }} --syn -j ACCEPT
{% endfor %}

# Website on port 80
-A INPUT -p tcp --dst {{ ansible_default_ipv6.address }} --dport 80 --syn -j ACCEPT
# Website on port 443
-A INPUT -p tcp --dst {{ ansible_default_ipv6.address }} --dport 443 --syn -j ACCEPT

-P INPUT DROP
-P FORWARD DROP
-P OUTPUT ACCEPT
COMMIT
