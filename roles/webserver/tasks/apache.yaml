---

- name: Install apache2 and {{ system.certbot_package }}
  ansible.builtin.package:
    name: 
      - "{{ system.apache.service_name }}"
      - "{{ system.certbot_package }}"

- name: Install additional packages
  ansible.builtin.package:
    name:
      - "{{ item }}"
  when: system.packages is defined and system.packages != ""
  loop: "{{ system.packages }}"

- name: Create certbot webroot
  ansible.builtin.file:
    path: "{{ dir.certbot }}"
    state: directory
    owner: "{{ webserver.user }}"
    group: "{{ webserver.group }}"

- name: Ensure apache configdir exists
  ansible.builtin.file:
    path: "{{ system.etc }}/{{ system.apache.config_dir }}"
    state: directory
    owner: "{{ root.user }}"
    group: "{{ root.group }}"

- name: Disable apache modules
  ansible.builtin.lineinfile:
    path: "{{ system.etc }}/{{ system.apache.config_file }}"
    regexp: '^#{{ item }}'
    line: '{{ item }}'
  loop: "{{ system.apache.modules_disable }}"
  notify: Restart apache

- name: Enable apache modules
  ansible.builtin.lineinfile:
    path: "{{ system.etc }}/{{ system.apache.config_file }}"
    regexp: '^#{{ item }}'
    line: '{{ item }}'
  loop: "{{ system.apache.modules }}"
  notify: Restart apache

- name: Enable port 443 (FreeBSD-specific)
  ansible.builtin.lineinfile:
    path: "{{ system.etc }}/{{ system.apache.config_file }}"
    line: "Listen 443"
    insertafter: "Listen 80"
  when: ansible_os_family == "FreeBSD"

- name: Include configdir in apache.conf
  ansible.builtin.lineinfile:
    path: "{{ system.etc }}/apache/apache.conf"
    line: "IncludeOptional {{ system.apache.config_dir }}/*.conf;"
  when: system.apache.config_dir == "Includes"

- name: Remove apache default configuration
  ansible.builtin.file:
    path: "{{ system.etc }}/{{ system.apache.config_dir }}/000-default.conf"
    state: absent

- name: Remove apache default configuration
  ansible.builtin.file:
    path: "{{ system.etc }}/{{ system.apache.config_dir }}/default"
    state: absent

- name: Generate apache (http) config
  ansible.builtin.template:
    src: "{{ role_path }}/templates/apache-http.conf.j2"
    dest: "{{ system.etc }}/{{ system.apache.config_dir }}/http.conf"
    owner: "{{ root.user }}"
    group: "{{ root.group }}"

- name: Start apache
  ansible.builtin.service:
    name: "{{ system.apache.service_name }}"
    state: started
    enabled: true
  register: apache_start

- name: Restart apache
  ansible.builtin.service:
    name: "{{ system.apache.service_name }}"
    state: restarted
  when: not apache_start.changed

- name: Request certificate
  ansible.builtin.shell: |
    certbot certonly --webroot -w /var/www/certbot --cert-name {{ domain }} -d {{ domain }} --non-interactive --email {{ email }} --agree-tos --config-dir {{ system.etc }}/letsencrypt

- name: Ensure apache log directory exists
  ansible.builtin.file:
    path: /var/log/apache
    state: directory
    owner: "{{ webserver.user }}"
    group: "{{ webserver.group }}"

- name: Generate apache (https) config
  ansible.builtin.template:
    src: "{{ role_path }}/templates/apache-https.conf.j2"
    dest: "{{ system.etc }}/{{ system.apache.config_dir }}/https.conf"
    owner: "{{ root.user }}"
    group: "{{ root.group }}"
  vars:
    webtunnel_path: "{{ lookup('file', playbook_dir + '/roles/tor/files/' + inventory_hostname + '.txt') }}"
  notify:
    - Start apache
    - Restart apache